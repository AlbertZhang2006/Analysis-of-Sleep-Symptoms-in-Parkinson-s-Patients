```{r}
# Load the required libraries
library(readr)
library(tidyverse)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
#Load Data
REM_Sleep_Behavior_Disorder_Questionnaire_15Jul2023 <- read_csv("PPMI Data/REM_Sleep_Behavior_Disorder_Questionnaire_15Jul2023.csv")
sleepdata<-as.data.frame(REM_Sleep_Behavior_Disorder_Questionnaire_15Jul2023)
Patient_Sex <- read_excel("PPMI Data/Patient_Sex.xlsx")
sex_data<-as.data.frame(Patient_Sex)


#Create new table with both datasets to add sex information to sleep data


newdata<-left_join(sex_data,sleepdata, by="PATNO")


data2019<- filter(newdata, str_split_i(INFODT, "/", 2) == '2019')
data2020<- filter(newdata, str_split_i(INFODT, "/", 2) == '2020') 
data2021<- filter(newdata, str_split_i(INFODT, "/", 2) == '2021') 


data2019<-as.tibble(data2019)
# Remove duplicates based on PATNO
data2019<-data2019[!duplicated(data2019$PATNO), ]
data2020<-as.tibble(data2020)
# Remove duplicates based on PATNO
data2020<-data2020[!duplicated(data2020$PATNO), ]
data2021<-as.tibble(data2021)
# Remove duplicates based on PATNO
data2021<-data2021[!duplicated(data2021$PATNO), ]
data<-data2019


# Create a function to calculate frequencies and perform statistical analysis
# Modify the analyze_data function to include counts in the results
# Modify the analyze_data function to include counts of '1's per sex in the results
analyze_data <- function(column_name, sex_column_name) {
  # Subset the data based on the column name
  subset_data <- data[, c(column_name, sex_column_name)]
  
  # Remove rows with NA/NaN in the subset_data
  subset_data <- subset_data[complete.cases(subset_data), ]
  
  # Recode sex column to "Male" and "Female"
  subset_data[[sex_column_name]] <- ifelse(subset_data[[sex_column_name]] == 0, "Female", "Male")
  
  # Calculate the counts of '1's for each sex
  count_male <- sum(subset_data[[column_name]] == 1 & subset_data[[sex_column_name]] == "Male")
  count_female <- sum(subset_data[[column_name]] == 1 & subset_data[[sex_column_name]] == "Female")
  
  # Create a cross-tabulation table
  freq_table <- table(subset_data)
  
  # Perform chi-square test
  chi_test <- chisq.test(freq_table, simulate.p.value = TRUE)
  
  # Extract the test statistic and p-value
  test_statistic <- chi_test$statistic
  p_value <- chi_test$p.value
  
  # Store the results in a data frame
  results_df <- data.frame(
    Column = column_name,
    Chi_Square_Test_Result = test_statistic,
    P_Value = p_value,
    Count_Male = count_male,
    Count_Female = count_female
  )
  
  return(results_df)
}
# Specify the sex column name
sex_column <- "SEX"


# Get the column names within the specified range
start_column <- "DRMVIVID"
end_column <- "CNSOTH"


start_pos <- match(start_column, colnames(data))
end_pos <- match(end_column, colnames(data))


# Check if start_column and end_column are found in the column names
if (is.na(start_pos) || is.na(end_pos)) {
  stop("Start or end column not found in the data.")
}


columns_to_analyze <- colnames(data)[start_pos:end_pos]
# Initialize an empty data frame to store all the results
all_results <- data.frame()
# Apply the analysis function to each column and append the results to the data frame
for (column in columns_to_analyze) {
  result <- analyze_data(column, sex_column)
  all_results <- bind_rows(all_results, result)
}


# Print the final data frame with all the results
print(all_results)
```
